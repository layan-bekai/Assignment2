# -*- coding: utf-8 -*-
"""Assignment 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x9DSlJ2GL_nNM9yigNOOSN3ADSW2VycL
"""

#pip install streamlit

import streamlit as st
import pandas as pd
import numpy as np

# Load dataset
df = pd.read_csv('Hourly Earning.csv')

# Set page title and subtitle
st.title("Hourly Earning Visualization Assignment 2")
st.markdown("*Prepared by Layan Bekai*")
st.markdown("---\n\n")

# Visualization 1: Bar Chart
st.header("Earnings by Year (Slider)")

# Create a slider to select the year
selected_year = st.slider("Select a year:", min_value=2013, max_value=2020, value=2018, step=1)

# Filter data for the selected year
filtered_data = df[df['year'] == selected_year]

# Create a bar chart using Streamlit's native bar_chart function
st.bar_chart(filtered_data.groupby(['country', 'gender'])['amount'].mean().unstack())

st.markdown("---\n\n")

# Visualization 2: Map (New Style)
st.header("Earnings Map")

# Create a map using Streamlit's native st.map function
st.map(filtered_data[['lat', 'lon', 'country']])

st.markdown("---\n\n")

# Visualization 4: Scatter Plot with Slider for United States
st.header("Scatter Plot (Earnings vs. Year) for United States")

# Create a slider to select the year range
min_year_us = df[df['country'] == 'United States']['year'].min()
max_year_us = df[df['country'] == 'United States']['year'].max()
selected_min_year_us, selected_max_year_us = st.slider(
    "Select a year range for United States:",
    min_value=min_year_us,
    max_value=max_year_us,
    value=(min_year_us, max_year_us),
    step=1
)

# Filter data for the selected year range and United States
filtered_scatter_data_us = df[(df['year'] >= selected_min_year_us) &
                               (df['year'] <= selected_max_year_us) &
                               (df['country'] == 'United States')]

# Create a scatter plot using Streamlit's native line_chart function
st.line_chart(filtered_scatter_data_us.groupby(['year', 'gender'])['amount'].mean().unstack())

st.markdown("---\n\n")

# Table with Checkbox Filter
st.header("Earnings Table (Filter by Gender)")

# Create a checkbox filter for gender
selected_gender = st.checkbox("Filter by Gender")

if selected_gender:
    # Show the table filtered by gender
    gender = st.selectbox("Select Gender:", df['gender'].unique())
    filtered_table_data = df[df['gender'] == gender]
else:
    # Show the full table
    filtered_table_data = df

# Display the filtered table
st.write(filtered_table_data)

